<?php
namespace common\components\mail;

use cheatsheet\Time;
use common\components\mail\jobs\JobsSendMail;
use common\helpers\MacrosHelper;
use common\models\Matches;
use common\models\RequestTournament;
use common\models\TournamentNotification;
use common\models\Tournaments;
use common\models\User;
use common\models\UserProfile;
use common\models\UserProfileToken;
use common\models\UserToken;
use http\Exception\InvalidArgumentException;
use Yii;
use yii\base\Component;

class Mail extends Component
{
    public array $from;
    private string $urlSite;

    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub

        if (!$nameSenderMail = Yii::$app->keyStorage->get('name-sender-mail', false)){
            Yii::$app->keyStorage->set('name-sender-mail', 'Теннисный клуб I Love Tennis');
            $nameSenderMail = 'Теннисный клуб I Love Tennis';
        }
        $this->from = [
            \Yii::$app->params['robotEmail'] => $nameSenderMail
        ];

        $this->urlSite = \Yii::$app->urlManagerFrontend->createAbsoluteUrl('/', 'https');
    }

    public function sendMailMainUser(int $userId, string $password): void
    {
        if ($user = User::findOne(['id' => $userId])){
            $token = UserToken::create(
                $user->id,
                UserToken::TYPE_ACTIVATION,
                Time::SECONDS_IN_A_DAY
            );

            $view = Yii::$app->view->renderFile('@console/mail/activation.php',[
                'url' => \Yii::$app->urlManagerFrontend->createAbsoluteUrl('activation/' . $token->token, 'https'),
                'urlSite' => \Yii::$app->urlManagerFrontend->createAbsoluteUrl('/', 'https'),
                'password' => $password,
                'user' => $user,
            ]);

            $this->goQueue(
                $view,
                $user->email,
                Yii::t('frontend', 'ACTIVATION_EMAIL')
            );
        }
    }

    public function sendMailNewUserOauth(int $userId, string $password): void
    {
        if ($user = User::findOne(['id' => $userId])){

            $view = Yii::$app->view->renderFile('@console/mail/registration-oauth.php',[
                'urlSite' => \Yii::$app->urlManagerFrontend->createAbsoluteUrl('/', 'https'),
                'password' => $password,
                'user' => $user,
            ]);

            $this->goQueue(
                $view,
                $user->email,
                Yii::t('frontend', 'ACTIVATION_EMAIL')
            );
        }
    }

    public function sendMailAfterResetPassword(int $userId, string $password): void
    {
        if ($user = User::findOne(['id' => $userId])){

            $view = Yii::$app->view->renderFile('@console/mail/reset-password-success.php',[
                'urlSite' => \Yii::$app->urlManagerFrontend->createAbsoluteUrl('/', 'https'),
                'password' => $password,
                'user' => $user,
            ]);

            $this->goQueue(
                $view,
                $user->email,
                Yii::t('frontend', 'VIEW_RESET_PASSWORD_SUCCESS_TRUE_TITLE')
            );
        }
    }

    public function sendMailUserProfile(int $userProfileId, string $password): void
    {
        return;
    }

    public function sendMailResetPasswordAccount(array $users)
    {
        if ($users){
            $view = Yii::$app->view->renderFile('@console/mail/passwordResetToken.php',[
                'urlSite' => \Yii::$app->urlManagerFrontend->createAbsoluteUrl('/', 'https'),
                'users' => $users,
            ]);

            $this->goQueue(
                $view,
                $users[0]->email,
                Yii::t('frontend', 'RESET_PASSWORD')
            );
        }
    }

    public function sendMailChangeEmail(int $userId, string $email): void
    {
        if ($email && $user = User::findOne(['id' => $userId])){
            $token = UserToken::create(
                $user->id,
                UserToken::TYPE_CHANGE_EMAIL,
                Time::SECONDS_IN_A_DAY
            );
            $token->updateAttributes(['params' => $email]);

            $view = Yii::$app->view->renderFile('@console/mail/change-email.php',[
                'url' => \Yii::$app->urlManagerFrontend->createAbsoluteUrl('change-email/' . $token->token, 'https'),
                'urlSite' => \Yii::$app->urlManagerFrontend->createAbsoluteUrl('/', 'https'),
                'email' => $email,
                'user' => $user,
            ]);

            $this->goQueue(
                $view,
                $email,
                Yii::t('frontend', 'CONFIRM_CHANGE_EMAIL')
            );
        }
    }

    public function resendMailActivate(int $userId): void
    {
        if ($user = User::findOne(['id' => $userId])){
            $token = UserToken::create(
                $user->id,
                UserToken::TYPE_ACTIVATION,
                Time::SECONDS_IN_A_DAY
            );

            $view = Yii::$app->view->renderFile('@console/mail/resend-activation.php',[
                'url' => \Yii::$app->urlManagerFrontend->createAbsoluteUrl('activation/' . $token->token, 'https'),
                'urlSite' => \Yii::$app->urlManagerFrontend->createAbsoluteUrl('/', 'https'),
                'user' => $user,
            ]);

            $this->goQueue(
                $view,
                $user->email,
                Yii::t('frontend', 'ACTIVATION_EMAIL')
            );
        }
    }

    public function sendInvitedByTournament(int $userId, int $tourId, int $userIdFrom = null): void
    {
        $tournament = Tournaments::findOne(['id' => $tourId]);
        if ($tournament && $profile = User::findOne(['id' => $userId])){
            $profileFrom = null;
            if ($userIdFrom){
                $profileFrom = User::findOne(['id' => $userIdFrom]);
            }
            $email = $profile->email;

            $view = Yii::$app->view->renderFile('@console/mail/invited-tournament-email.php',[
                'url' => \Yii::$app->urlManagerFrontend->createAbsoluteUrl('tournament/' . $tourId, 'https'),
                'urlYes' => \Yii::$app->urlManagerFrontend->createAbsoluteUrl('go-tournament/' . $tourId, 'https'),
                'urlNo' => \Yii::$app->urlManagerFrontend->createAbsoluteUrl('not-tournament/' . $tourId, 'https'),
                'urlSite' => \Yii::$app->urlManagerFrontend->createAbsoluteUrl('/', 'https'),
                'email' => $email,
                'profile' => $profile,
                'tournament' => $tournament,
                'profileFrom' => $profileFrom
            ]);

            try {
                $this->from = [
                    \Yii::$app->params['robotEmail'] => $tournament->club->name
                ];
            }catch (\Exception $exception){}

            $this->goQueue(
                $view,
                $email,
                Yii::t('frontend', 'CONFIRM_PARTICIPATION_TOURNAMENT_BY_EMAIL')
            );
        }
    }

    public function sendInvitedByMatch(int $userId, int $matchId, int $userIdFrom = null): void
    {
        $match = Matches::findOne(['id' => $matchId]);
        if ($match && $profile = User::findOne(['id' => $userId])){
            $profileFrom = null;
            if ($userIdFrom){
                $profileFrom = User::findOne(['id' => $userIdFrom]);
            }
            $email = $profile->email;

            $view = Yii::$app->view->renderFile('@console/mail/invited-match-email.php',[
                'urlYes' => \Yii::$app->urlManagerFrontend->createAbsoluteUrl('go-match/' . $matchId, 'https'),
                'urlNo' => \Yii::$app->urlManagerFrontend->createAbsoluteUrl('not-match/' . $matchId, 'https'),
                'urlSite' => \Yii::$app->urlManagerFrontend->createAbsoluteUrl('/', 'https'),
                'email' => $email,
                'profile' => $profile,
                'match' => $match,
                'profileFrom' => $profileFrom
            ]);

            $this->goQueue(
                $view,
                $email,
                Yii::t('frontend', 'CONFIRM_PARTICIPATION_MATCH_BY_EMAIL')
            );
        }
    }

    public function sendMailRequestTournament(User $user, int $status, int $tourId): void
    {
        if (!$tour = Tournaments::findOne($tourId)){
            throw new \yii\base\InvalidArgumentException('not param $tour');
        }

        $text = null;
        $subject = null;
        switch ($status){
            case RequestTournament::STATUS_YES:
                $text = 'Ваша заявка на турнир "' . $tour->title . ' (' . $tour->showDateResults() . ')' .'"  была одобрена.';
                $subject = 'Playtennis / Ваша заявка на турнир "' . $tour->title . '" (' . $tour->showDateResults() . ')' .'  одобрена.';
                break;
            case RequestTournament::STATUS_CANCEL:
                $text = 'Ваша заявка на турнир "' . $tour->title . ' (' . $tour->showDateResults() . ')' .'"  была отклонена.';
                $subject = 'Playtennis / Ваша заявка на турнир "' . $tour->title . '" (' . $tour->showDateResults() . ')' .'  отклонена.';
                break;
        }

        if (!$text){
            throw new \yii\base\InvalidArgumentException('not param $text');
        }

        $view = Yii::$app->view->renderFile('@console/mail/request-tournament.php',[
            'urlSite' => $this->urlSite,
            'user' => $user,
            'text' => $text,
            'url' => \Yii::$app->urlManagerFrontend->createAbsoluteUrl('tournament/' . $tourId, 'https'),
        ]);

        $this->goQueue(
            $view,
            $user->email,
            $subject
        );
    }

    public function sendMailByTournament(): void
    {
        if ($emails = TournamentNotification::findAll(['status' =>
            [TournamentNotification::STATUS_NEW,TournamentNotification::STATUS_ERROR]
        ])){
            /* @var TournamentNotification $email */
            /* @var User $user */
            foreach ($emails as $email){
                try {
                    if ($email->users){
                        foreach ($email->users as $user){
                            $view = Yii::$app->view->renderFile('@console/mail/layouts/text.php',[
                                'content' => MacrosHelper::many(['USERNAME' => $user->getName()],$email->text)
                            ]);
                            try {
                                $this->from = [
                                    \Yii::$app->params['robotEmail'] => $email->tournament->club->name
                                ];
                            }catch (\Exception $exception){}
                            $this->goQueue(
                                $view,
                                $user->email,
                                $email->subject
                            );
                        }
                        $email->updateAttributes(['status' => TournamentNotification::STATUS_SUCCESS]);
                    }
                }catch (\Exception $e){
                    $email->updateAttributes(['status' => TournamentNotification::STATUS_ERROR]);
                }
            }
        }
    }

    private function goQueue(string $view, $sentTo, string $subject): void
    {
        try {
            \Yii::$app->queuemail->push(new JobsSendMail([
                'from' => $this->from,
                'view' => $view,
                'sentTo' => $sentTo,
                'subject' => $subject,
            ]));
        }catch (\Exception $e){
            \Yii::error($e, 'mail');
        }
    }
}